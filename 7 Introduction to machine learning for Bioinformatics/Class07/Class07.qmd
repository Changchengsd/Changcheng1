---
title: "Class07: Machine learning 1"
author: "Changcheng Li (PID: A69027828)"
format: pdf
---

# Clustering

We will start with k-means clustering, one of the most prevalent of all clustering methods.

To get started let's make some data up:

```{r}
hist( rnorm(10000, mean = 3) )
```

```{r}
tmp <- c( rnorm(30,3), rnorm(30,-3))
x <- cbind(x = tmp, y = rev(tmp))
x
plot(x)
```

The main function in R for K-means clustering is called 'kmeans()'

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

```{r}
#View(k)
```

>Q1. How many points are in each cluster

```{r}
k$size
```

>Q2. The clustering result i.e. membership vector?

```{r}
k$cluster
```

>Q3. Cluster centers

```{r}
k$centers
```

>Q4. Make a plot of our data colored by clustering results with optionally the cluster centers shown

```{r}
plot(x, col = k$cluster, pch = 16)
points(k$centers, col = "blue", pch = 16, cex =2)
```

>Q5. Run kmeans again but cluster into 3 groups and plot results like we did above

```{r}
k3 <- kmeans(x, centers = 3, nstart = 20)
plot(x, col = k3$cluster, pch = 16)
points(k3$centers, col = "blue", pch = 16, cex =2)
```

K-means will always return a clustering result - even if there is no clear groupings.

#Hierarchical Clustering

Hierarchical clustering it has an advantage in that it can reveal the structure in your data rather than imposing a structure as k-means will.

The main function in "base" R is called 'hclust()'

It requires a distance matrix input.

```{r}
hc <- hclust(dist(x))
```

```{r}
plot(hc)
abline(h = 8, col = "red")
```

The function to get our clusters/groups fron a hclust object is called 'cutree()'

```{r}
grps <- cutree(hc, h=8)
```

>Q. Plot our hclust results in terms of our data colored by cluster membership.

```{r}
plot(x, col = grps)
```

#Principle component analysis

```{r}
#Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
## Complete the following code to find out how many rows and columns are in x?
dim(x)
## Preview the first 6 rows
head(x)
# Note how the minus indexing works
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
dim(x)
```

```{r}
#A better way for exclude rowname
x <- read.csv(url, row.names=1)
head(x)
```

#Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?
"x <- read.csv(url, row.names=1) head(x)" works more robust because when you rerun the chunk the x <- x[,-1] in the first method will shrink x

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
#Q3: Changing what optional argument in the above barplot() function results in the following plot?
#beside = FALSE
barplot(as.matrix(x), beside=FALSE, col=rainbow(nrow(x)))
```

#Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?
The code uses 17 colors to distinguish different food. The resulting figure are food consumption paired for the corresponding horizontal and vertical countries. When a given point lies on the diagonal, it represents that this food consumption is similar in the two corresponding countries.

```{r}
pairs(x, col=rainbow(10), pch=16)
```

#Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?
The points are more dispersed from the diagonal in plots comparing N.Ireland and other countries than that in other plots(like Fresh_potatoes represented by the blue point and Fresh_fruit represented by the orange point), which means food consumption is more different N.Ireland.

#PCA to rescue

Help me make sense of this data
The main function for PCA in base R is called 'prcomp()'

```{r}
# Use the prcomp() PCA function 
pca <- prcomp( t(x) )
summary(pca)
```

One of the main results that folks look for is called the "score plot" a.k.a PC plot, PC1 vs PC2 plot.

```{r}
plot(pca$x[,1], pca$x[,2])
abline(h = 0, v = 0, col = 'green', lty = "dashed")
```


```{r}
# Plot PC1 vs PC2
#Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
#Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.
text(pca$x[,1], pca$x[,2], colnames(x), col = c("red", "yellow", "blue", "green"))
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

```{r}
## or the second row here...
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

```{r}
## Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

```{r}
#Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 mainly tell us about?
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
#Fresh_potatoes and Soft_drinks are the two food groups feature prominantely.PC2 tells that Scotland and Wales differ major in consumption of these two food.
```

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# Our first basic plot
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country) + 
  geom_point()
```

```{r}
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()
```

```{r}
ld <- as.data.frame(pca$rotation)
ld_lab <- tibble::rownames_to_column(ld, "Food")

ggplot(ld_lab) +
  aes(PC1, Food) +
  geom_col()
```

```{r}
ggplot(ld_lab) +
  aes(PC1, reorder(Food, PC1), bg=PC1) +
  geom_col() + 
  xlab("PC1 Loadings/Contributions") +
  ylab("Food Group") +
  scale_fill_gradient2(low="purple", mid="gray", high="darkgreen", guide=NULL) +
  theme_bw()
```

```{r}
## The inbuilt biplot() can be useful for small datasets 
biplot(pca)
```

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

```{r}
#Q10: How many genes and samples are in this data set?
dim(rna.data)
#100 genes and 10 samples
```

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```


```{r}
plot(pca, main="Quick scree plot")
```

```{r}
## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```

```{r}
## A vector of colors for wt and ko samples
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
```

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

# Our first basic plot
ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()
```

```{r}
# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p
```

```{r}
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```

```{r}
loading_scores <- pca$rotation[,1]

## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)
gene_scores <- abs(loading_scores) 
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)

## show the names of the top 10 genes
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes 
```

```{r}
sessionInfo()
```
